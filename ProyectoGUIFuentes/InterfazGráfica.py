# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
# from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QLineEdit, QPushButton, QLabel
from minizinc import Instance, Model, Solver
import time
import os


class Ui_Dialog(object):

    def __init__(self, parent=None):
        self.mzn_model = Model('./Proyecto.mzn')
        self.solver = Solver.lookup("coin-bc")
        self.mzn_instance = None
        self.mpl_instance = None

    def setupScene(self):
        self.scene = QtWidgets.QGraphicsScene()
        self.pen = QtGui.QPen(QtCore.Qt.gray)
        self.redPen = QtGui.QPen(QtCore.Qt.red)
        self.greenBrush = QtGui.QBrush(QtCore.Qt.green)
        self.redBrush = QtGui.QBrush(QtCore.Qt.red)
        self.scale = 20
        self.padding_y = 20

    def buttonFileClicked(self):
        options = QtWidgets.QFileDialog.Options()
        filename, _ = QtWidgets.QFileDialog.getOpenFileName(None, "QFileDialog.getOpenFileName()", "", "Dzn Files (*.dzn)", options=options)
        if filename:
            file_name = os.path.basename(filename)
            self.mzn_instance = Instance(self.solver, self.mzn_model)
            self.mzn_instance.add_file(filename, True)
            self.labelFile.setText(file_name)

    def buttonFileClickedMpl(self):
        # Opciones para el cuadro de diálogo
        options = QtWidgets.QFileDialog.Options()
        
        # Mostrar el diálogo de selección de archivo
        filename, _ = QtWidgets.QFileDialog.getOpenFileName(
            None, "Selecciona un archivo .mpl", "", "Archivos MPL (*.mpl)", options=options
        )
        
        if filename:
            # Leer el archivo seleccionado
            with open(filename, "r") as f:
                data = f.read()
            
            # Procesar los datos
            data = data.split("\n")
            data.pop(-1)  # Limpiar la última línea vacía si existe

            # Formatear el contenido para el archivo .dzn
            dataDZN = f"n = {data.pop(0)};\n"
            m = int(data.pop(0))
            dataDZN += f"m = {m};\n"
            dataDZN += f"p = [{data.pop(0)}];\n"
            dataDZN += f"v = [{data.pop(0)}];\n"
            dataDZN += f"ce = [{data.pop(0)}];\n"
            dataDZN += "c = [|"
            
            for j in range(m):
                dataDZN += f"{data.pop(0)}|"
            
            dataDZN += "];\n"
            dataDZN += f"ct = {data.pop(0)};\n"
            dataDZN += f"maxM = {data.pop(0)};"

            # Crear el archivo .dzn en la misma ubicación que el archivo original
            output_filename = os.path.splitext(filename)[0] + ".dzn"
            with open(output_filename, "w") as f:
                f.write(dataDZN)

            # Actualizar la etiqueta con el nombre del archivo
            self.labelFile.setText(f"Archivo creado: {output_filename}")

    def selectSolver(self):
        self.solver = Solver.lookup(self.comboBox.itemText(self.comboBox.currentIndex()))

    def buttonSolverClicked(self):
        if (self.mzn_instance is None):
            return
        self.labelData.setText('Resolviendo el modelo...')
        start_time = time.time()
        self.result = self.mzn_instance.solve()
        duration = time.time() - start_time
        if (self.result):
            self.labelData.setText(f"Modelo Resuleto! Duración: {duration} segundos")  
            self.drawSolution()
        else:
            self.labelData.setText(f"No hay solución para el modelo. Tiempo de ejecución: {duration}")

    def drawSolution(self):
        x_values = self.result["x"]
        pol_value = self.result["objective"]

        pol_value_rounded = round(pol_value * 1000) / 1000

        # Crear un string con todos los valores de 'x'
        x_str = ', '.join(str(val) for val in x_values)

        # Mostrar en el QLabel
        self.labelResult.setText(f"x = [{x_str}]\nPolarización mínima lograda: {pol_value_rounded}")

    # def handleButtonClick(self):
    #     # Obtener el texto ingresado y mostrarlo
    #     text = self.lineEdit.text()
    #     print(f"Texto ingresado: {text}")

    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(640, 480)
        Dialog.setWindowIcon(QtGui.QIcon("logo.png"))
        self.labelMessage = QtWidgets.QLabel(Dialog)
        self.labelMessage.setGeometry(QtCore.QRect(20, 0, 440, 16))
        self.labelMessage.setObjectName("labelMessage")

        self.pushButtonFile = QtWidgets.QPushButton(Dialog)
        self.pushButtonFile.setGeometry(QtCore.QRect(20, 20, 130, 25))
        self.pushButtonFile.setObjectName("pushButtonFile")

        self.pushButtonFileMpl = QtWidgets.QPushButton(Dialog)
        self.pushButtonFileMpl.setGeometry(QtCore.QRect(20, 200, 130, 25))
        self.pushButtonFileMpl.setObjectName("pushButtonFileMpl")

        self.comboBox = QtWidgets.QComboBox(Dialog)
        self.comboBox.setGeometry(QtCore.QRect(190, 20, 120, 25))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("coin-bc")
        self.comboBox.addItem("gecode")
        self.comboBox.addItem("chuffed")

        self.pushButtonSolver = QtWidgets.QPushButton(Dialog)
        self.pushButtonSolver.setGeometry(QtCore.QRect(330, 20, 75, 25))
        self.pushButtonSolver.setObjectName("pushButtonSolver")

        self.labelFile = QtWidgets.QLabel(Dialog)
        self.labelFile.setGeometry(QtCore.QRect(20, 50, 500, 16))
        self.labelFile.setObjectName("labelFile")

        self.labelData = QtWidgets.QLabel(Dialog)
        self.labelData.setGeometry(QtCore.QRect(20, 70, 320, 16))
        self.labelData.setObjectName("labelData")

        self.labelResult = QtWidgets.QLabel(Dialog)
        self.labelResult.setGeometry(QtCore.QRect(20, 100, 500, 60))
        self.labelResult.setObjectName("labelResult")

        # self.lineEdit = QtWidgets.QLineEdit(Dialog)
        # self.lineEdit.setGeometry(QtCore.QRect(20, 160, 400, 25))  # Define la posición y el tamaño
        # self.lineEdit.setObjectName("lineEdit")
        # self.lineEdit.setPlaceholderText("Introduce un valor aquí...")  # Texto de sugerencia
        # self.pushButtonGetText = QtWidgets.QPushButton(Dialog)
        # self.pushButtonGetText.setGeometry(QtCore.QRect(440, 160, 75, 25))  # Posición del botón
        # self.pushButtonGetText.setObjectName("pushButtonGetText")
        # self.pushButtonGetText.setText("Obtener Texto")
        # self.pushButtonGetText.clicked.connect(self.handleButtonClick)

        self.retranslateUi(Dialog)
        self.pushButtonFile.clicked.connect(self.buttonFileClicked)
        self.pushButtonFileMpl.clicked.connect(self.buttonFileClickedMpl)
        self.comboBox.currentIndexChanged.connect(self.selectSolver)
        self.pushButtonSolver.clicked.connect(self.buttonSolverClicked)
        QtCore.QMetaObject.connectSlotsByName(Dialog)
        self.setupScene()

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "MinPol"))
        self.pushButtonFile.setText(_translate("Dialog", "Seleccionar archivo dzn"))
        self.pushButtonFileMpl.setText(_translate("Dialog", "Seleccionar archivo mpl"))
        self.pushButtonSolver.setText(_translate("Dialog", "Resolver"))
        self.labelMessage.setText(_translate("Dialog","Seleccione un archivo de datos para empezar. El solver por defecto es Gecode"))
        self.labelData.setText(_translate("Dialog", "Esperando datos..."))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
